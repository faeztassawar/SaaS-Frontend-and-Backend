// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Item {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @unique
  desc       String
  price      Float
  image      String?
  categoryId String   @db.ObjectId // categoryId should not be nullable
  Category   Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  image  String?
  Menu   Menu?   @relation(fields: [menuId], references: [id])
  menuId String? @db.ObjectId
  Items  Item[] // A category can have multiple items
}

model Restaurant {
  restaurant_id String               @id @default(auto()) @map("_id") @db.ObjectId
  owner_email   String               @unique
  name          String
  cuisine       String?
  about_us      String
  desc          String
  timing        String
  phone         String?
  tempModel     String
  Menu          Menu[]
  Customers     RestaurantCustomer[]

  @@map("restaurants")
}

model RestaurantCustomer {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String        @unique
  userId        String        @unique
  isAdmin       Boolean
  isOwner       Boolean
  Restaurant    Restaurant?   @relation(fields: [restaurant_id], references: [restaurant_id])
<<<<<<< HEAD
  restaurant_id String? @db.ObjectId
=======
  restaurant_id String?       @db.ObjectId
>>>>>>> 97b58886476dc70756627d20c02391ede40023b0
  Reservations  Reservation[] // Add this line for the relation

  @@map("restaurantCustomer")
}

model Menu {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  categories    Category[]
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [restaurant_id])
  restaurant_id String     @db.ObjectId

  @@map("menus")
}

enum Templates {
  Classic
  FastFood
}

enum SubscriptionPeriod {
  monthly
  yearly
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model RestaurantOwner {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String  @unique
  userId        String  @unique
  restaurant_id String? @db.ObjectId

  
  
  customerId String? @unique // Stripe customer ID, this will be important when we need to delete the subscription

  Subscription Subscription?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id     String             @id @default(cuid()) @map("_id")
  userId String             @unique
  template   Templates
  period SubscriptionPeriod

  startDate DateTime @default(now())
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RestaurantOwnerId RestaurantOwner @relation(fields: [userId], references: [id])
}

model Template {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  model         String
  name          String
  customerCount Int
}

// model Order {
//   order_id String  @id @default(auto()) @map("_id") @db.ObjectId
//   u_id     User    @relation(fields: [User_id], references: [user_id])
//   User_id  String  @db.ObjectId
//   cart     Item[]
//   Status   Boolean
// }

model Reservation {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  restaurant_id String
  email         String
  name          String
  guestsCount   Int
  date          DateTime
  time          String
  status        String
  customerId    String             @db.ObjectId
  Customer      RestaurantCustomer @relation(fields: [customerId], references: [id])

  @@map("reservation")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token]) // Compound unique constraint
}